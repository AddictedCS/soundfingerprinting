<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
	<TargetFramework>netstandard2.0</TargetFramework>
	<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
	<Nullable>enable</Nullable>
	<PackageVersion>11.3.0</PackageVersion>
	<Authors>Sergiu Ciumac</Authors>
	<PackageDescription>SoundFingerprinting is a C# framework that implements an efficient algorithm of audio fingerprinting and identification. Designed for developers, enthusiasts, researchers in the fields of audio processing, data mining, digital signal processing.</PackageDescription>
	<PackageProjectUrl>https://github.com/addictedcs/soundfingerprinting</PackageProjectUrl>
	<RepositoryUrl>https://github.com/AddictedCS/soundfingerprinting</RepositoryUrl>
	<RepositoryType>git</RepositoryType>
	<PackageReleaseNotes>
		Version 11.3.0
		- Adding IsFullMatch property to ResultEntry to indicate if the match is a duplicate match or not.
		Version 11.1.0
		- Adjusting `IRealtimeResultEntryFilter` implementation classes, making sure we adhere to the same principles across both configuration options `ResultEntryFilter` and `OngoingResultEntryFilter`.
		- Adding `ChainedRealtimeEntryFilter` which replaces `OngoingRealtimeResultEntryFilter`.
		- `TrackMatchLengthEntryFilter` can be used as `TrackCoverageLengthEntryFilter(waitTillCompletion: false)`
		- `OngoingRealtimeResultEntryFilter(x, y)` can be chained as new ChainedRealtimeEntryFilter([new TrackRelativeCoverageEntryFilter(x, waitTillCompletion: false), new TrackCoverageLengthEntryFilter(y, waitTillCompletion: false)`])
		- `TrackRelativeCoverageLengthEntryFilter` can be used as `TrackRelativeCoverageEntryFilter(waitTillCompletion: true)`.
		Version 11.0.0
		- Cleanup of the codebase, removing obsolete methods and classes.
		- Removed IAdvancedModelService.
		- Removed obsolete Query methods from IQueryService, leaving only QueryEfficient method.
		- Removed MediaType from QueryConfiguration, as it was not used anymore.
		Version 10.4.0
		- Added new property MetaFields to AVQueryMatch, to be able to store additional metadata about the match.
		Version 10.3.0
		- Improved the ability to reconstruct coverage from tone signal matches (silence can be treated as a tone signal).
		- Added a fingerprinting flag that allows including silence fingerprints in the generated result set.
		Version 10
		- Accomodating SoundFingerprinting.Emy upgrade to FFmpeg 6.x
		Version 9.5.0
		- Dependency upgrade to .NET 8
		Version 9.4.2
		- Contains an important improvement to QueryCommand, allowing a much faster lookup for the use-cases when the track and the query are very long and almost identical.
		- The improvement is rooted in the idea of returning Candidates from the IModelService instead of list of SubFingerprints. This provided knowledge on which hashed fingerprint matched with the query.
		- To further improve the API design, methods related to the correct functioning of the QueryCommand were extracted into IQueryService interface (from which IModelService derives).
	</PackageReleaseNotes>
	<PackageTags>Audio Video Identification Fingerprinting Digital Signal Processing Music Recognition Data Mining Content Sound Shazam</PackageTags>
	<LangVersion>latest</LangVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
	<PackageLicenseFile>license.txt</PackageLicenseFile>
    <PackageIcon>soundfingerprinting.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>  
  </PropertyGroup>
	<PropertyGroup>
		<CodeAnalysisRuleSet>../Emy.ruleset</CodeAnalysisRuleSet>
	</PropertyGroup>
  <Target Name="PrepublishScript" BeforeTargets="PrepareForPublish">
	<ItemGroup>
		<DocFile Include="bin\$(Configuration)\$(TargetFramework)\*.xml" />
	</ItemGroup>
	<Copy SourceFiles="@(DocFile)" DestinationFolder="$(PublishDir)" SkipUnchangedFiles="false" />
  </Target>
  <ItemGroup>
	<PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
		<PrivateAssets>all</PrivateAssets>
		<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	</PackageReference>
	<AdditionalFiles Include="../stylecop.json" />
  </ItemGroup>
  <ItemGroup>
	  <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.1" />
	  <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	  </PackageReference>
	  <PackageReference Include="protobuf-net" Version="2.4.6" />
	  <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
	<None Include="../../license.txt">
		<Pack>True</Pack>
		<PackagePath></PackagePath>
	</None>
    <None Include="../../soundfingerprinting.png">
	   <Pack>True</Pack>
	   <PackagePath></PackagePath>
	</None>
	<None Include="../../README.md">
	   <Pack>True</Pack>
	   <PackagePath></PackagePath>
	</None>
  </ItemGroup>
</Project>
