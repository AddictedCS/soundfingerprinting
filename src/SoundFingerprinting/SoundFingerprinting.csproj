<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
	<TargetFramework>netstandard2.0</TargetFramework>
	<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
	<Nullable>enable</Nullable>
	<PackageVersion>8.16.5-beta4</PackageVersion>
	<Authors>Sergiu Ciumac</Authors>
	<PackageDescription>SoundFingerprinting is a C# framework that implements an efficient algorithm of audio fingerprinting and identification. Designed for developers, enthusiasts, researchers in the fields of audio processing, data mining, digital signal processing.</PackageDescription>
	<PackageProjectUrl>https://github.com/addictedcs/soundfingerprinting</PackageProjectUrl>
	<RepositoryUrl>https://github.com/AddictedCS/soundfingerprinting</RepositoryUrl>
	<RepositoryType>git</RepositoryType>
	<PackageReleaseNotes>
		Removing small coverages generated by MultipleBestPaths, that are part of the same sequence.
		Unifying SingleBestPath and MultipleBestPaths under the same implementation that takes into account MaxGap and Limit parameters.
		Editing Coverage track/query match ends at based on discrete coverage length instead of coverage with permitted gaps length.
			This change unifies the front-end logic that can build the player URL with the backend logic that builds coverage object.
			Overlapping region filter will sort by discrete coverage length
		SingleBestPath will return multiple matches over a max-gap parameter (min of query/track length), as we can easily detect this use-case.
			This is a step forward in getting rid of cross-matches for use-cases when those are generating artifacts we want to get rid of.
	</PackageReleaseNotes>
	<PackageTags>Audio Video Identification Fingerprinting Digital Signal Processing Music Recognition Data Mining Content Sound Shazam</PackageTags>
	<LangVersion>latest</LangVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
	<PackageLicenseFile>license.txt</PackageLicenseFile>
    <PackageIcon>soundfingerprinting.png</PackageIcon>
  </PropertyGroup>
	<PropertyGroup>
		<CodeAnalysisRuleSet>../Emy.ruleset</CodeAnalysisRuleSet>
	</PropertyGroup>
  <Target Name="PrepublishScript" BeforeTargets="PrepareForPublish">
	<ItemGroup>
		<DocFile Include="bin\$(Configuration)\$(TargetFramework)\*.xml" />
	</ItemGroup>
	<Copy SourceFiles="@(DocFile)" DestinationFolder="$(PublishDir)" SkipUnchangedFiles="false" />
  </Target>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="6.0.2" />
	<PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
		<PrivateAssets>all</PrivateAssets>
		<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	</PackageReference>
	<AdditionalFiles Include="../stylecop.json" />
  </ItemGroup>
  <ItemGroup>
	  <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="6.0.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	  </PackageReference>
	  <PackageReference Include="protobuf-net" Version="2.4.6" />
	  <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="6.0.0" />
  </ItemGroup>

  <ItemGroup>
	<None Include="../../license.txt">
		<Pack>True</Pack>
		<PackagePath></PackagePath>
	</None>
    <None Include="../../soundfingerprinting.png">
	   <Pack>True</Pack>
	    <PackagePath></PackagePath>
	</None>
  </ItemGroup>
</Project>
